":vmap  :vnoremap  :vunmap  :vmapclear	    yes      yes
"":xmap  :xnoremap  :xunmap  :xmapclear	    yes       -
":smap  :snoremap  :sunmap  :smapclear	    -	     yes

"*mapmode-ic* *mapmode-i* *mapmode-c* *mapmode-l*
""Some commands work both in Insert mode and Command-line mode, some not:
"commands:				      modes: ~
                                        "Insert  Command-line	Lang-Arg ~
"":map!  :noremap!  :unmap!  :mapclear!	    yes	       yes	   -
":imap  :inoremap  :iunmap  :imapclear	    yes		-	   -
"":cmap  :cnoremap  :cunmap  :cmapclear	     -	       yes	   -
":lmap  :lnoremap  :lunmap  :lmapclear	    yes*       yes*	  yes*

"totally annoying default mapping for cap k
nmap K <nop>


" When in diff mode - Command-Shift-J/K move to next change in diff.
nmap <D-K> [c
nmap <D-J> ]c


" Always gets out of autocomplete's and just lets you enter the newline!
imap <C-Cr> <Left><Right><Cr>
" ==== My favorite way of avoiding the escape key - feel free to delete all this
" == c-l escapes and saves, avoid the pinky stretch
vmap <C-l> <Esc><Cr>
imap <C-l> <Esc>l
map <c-l> <Esc>
"while selecting (for use in snippets c-l cancels out)
smap <C-l> <Esc>
" While commanding
cmap <C-l> <C-c>



" TComment
"Toggle comment
"mapping to `gc` doesn't toggle one visually selected line - only multiples.
vmap <D-/> <c-_><c-_>
vmap <D-s-/> <c-_>b
nmap <D-/> gc$


" == c-h always does the same as c-l but also saves.
vmap <C-h> <Esc><Cr>:w<Cr>
imap <C-h> <Esc>:w<Cr>l
map <c-h> <Esc>:w<Cr>
smap <C-h> <Esc>:w<Cr>
cmap <C-h> <C-c>:w<Cr>


imap <C-k> <space><Esc>Da
imap <C-j> <esc>Ji
imap <C-o> <Esc>O
imap <S-Enter> <End><Cr>


" Huge saver! Why do you need to press shift when executing a command?
nnoremap ; :

" fast scrolling using control when in command mode (keeping the j/k paradigm)
map <C-j> <C-d>
map <C-k> <C-u>

" Make S always delete until the point where you'd want to start typing -
" with some indent plugins, or settings the desired behavior is lost - this
" restores it. (Doesn't always work - looking for better solution)
nmap S ddO

" ==== Window and split navigation ===
"Tab through your splits! (Shift tab won't ever work on terminal :( )
set winwidth=1
nmap <Tab> <c-w><c-w>
nmap <s-Tab> <c-w><s-w>


imap <c-Tab> <Esc>:tabnext<Cr>
imap <c-S-Tab> <Esc>:tabprev<Cr>
nmap <c-Tab> :tabnext<Cr>
nmap <c-S-Tab> :tabprev<Cr>

imap <D->> <Esc>:vertical resize +10<CR>
imap <D->> <Esc>:vertical resize +10<CR>
nmap <D->> :vertical resize +10<CR>
nmap <D-<> :vertical resize -10<CR>

" UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"


" Clear search highlight when escape is pressed.
" Is really horrible on terminals.
" nnoremap <esc> :noh<return><esc>


" Alphabetize on F5
vmap <F5> :sort ui<Cr>


" space through your tabs!
map <Space> gt
" shift-space backwards - doesn't work on terminal, I believe
map <s-Space> gT

if has('gui_win32')
  " space through your tabs!
  map <M-}> gt
  " shift-space backwards - doesn't work on terminal, I believe
  map <M-{> gT
  imap <M-}> <Esc>gt
  " shift-space backwards - doesn't work on terminal, I believe
  imap <M-{> <Esc>gT

  nmap <F13> :q<Cr>
  imap <F13> <Esc>:q<Cr>
  nmap <F14> :qall<Cr>
  imap <F14> <Esc>:qall<Cr>
endif

"Emacs keybindings while inserting.
imap <C-a> <Esc>I
map! <c-e> <End>
map! <c-f> <Right>
map! <c-b> <Left>
map! <c-d> <Delete>
noremap! <c-n> <Down>
noremap! <c-p> <Up>
inoremap <c-g> <c-p>

" Command line
cmap <c-a> <Home>

function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
nmap <D-F> :call Preserve("normal gg=G")<CR>
" This one doesn't work - still need to figure it out.
" vmap <D-F> :call Preserve("visual =")<CR>



" auto change directory of file. (really nice, but not always wanted)
" autocmd BufEnter * execute "chdir ".escape(expand("%:p:h"), ' ')
if has("gui_running") " all this for gui use
    "set number
    if has("gui_macvim")
        " =====================================================================
        " Macy key bindings.
        " =====================================================================
        " macmenu Window.Toggle\ Full\ Screen\ Mode key=<D-CR>
        " This is bound in ~/.vim/.bundlesVimRc
        " http://lifehacker.com/5280456/hide-your-mac-menu-bar-and-dock-for-a-cleaner-desktop

        " Since it makes sense to make c-d match the mac ox/emacs style forward
        " delete, c-d can't be (shift left in insert mode). Given that, we can
        " make a better mac os x combo for indenting and unindenting in insert
        " mode. That frees up c-t
        inoremap <D-]> <c-t>
        inoremap <D-[> <c-d>

        " Awesome visual selection maintained when indenting.
        vmap <D-]> >gv
        vmap <D-[> <gv
        " Map Command-# to switch tabs
        map  <D-0> 0gt
        imap <D-0> <Esc>0gt
        map  <D-1> 1gt
        imap <D-1> <Esc>1gt
        map  <D-2> 2gt
        imap <D-2> <Esc>2gt
        map  <D-3> 3gt
        imap <D-3> <Esc>3gt
        map  <D-4> 4gt
        imap <D-4> <Esc>4gt
        map  <D-5> 5gt
        imap <D-5> <Esc>5gt
        map  <D-6> 6gt
        imap <D-6> <Esc>6gt
        map  <D-7> 7gt
        imap <D-7> <Esc>7gt
        map  <D-8> 8gt
        imap <D-8> <Esc>8gt
        map  <D-9> 9gt
        imap <D-9> <Esc>9gt



        " Some Textmatey Shortcuts:
        imap <D-S-Enter> <End>;<Cr>
        imap <D-A> <End>;

        " Toggle Spell Check Easily:
        imap <D-P> <Esc>l:set spell!<Cr>
        nmap <D-P> :set spell!<Cr>

        " Building:
        " map <D-b> :w<Cr>:!./build.sh<Cr>
        " imap <D-b> <Esc>:w<Cr>:!./build.sh<Cr>

        " CmdRB to save current file and build silently - then refresh browser.
        " macmenu &Tools.Make key=<nop>
        " Interferes with ctrlp mappings.
        " map <D-r> :w<Cr>:RRB<Cr>
        " imap <D-r> <Esc>:w<Cr>:RRB<Cr>
    endif
endif
